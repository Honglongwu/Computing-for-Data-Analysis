install.packages(c("spaceExt", "igraph"))
load("~/Downloads/senate.RData")
sel=which(!(colSums(is.na(voteMatrix))>100))
partyD=as.numeric(idList[sel,5]=="D")
partyI=as.numeric(idList[sel,5]=="ID" | idList[sel,5]=="I")
#用spaceExt做计算
res=glasso.miss(voteMatrix[,sel],20,rho=0.1,penalize.diagonal=FALSE)
#计算偏相关系数矩阵
p=-res\$wi
d=1/sqrt(diag(res\$wi))
p=diag(d)%*%p%*%diag(d)
diag(p)=0
#igraph包生成图模型、作图
g=graph.adjacency((p>(0.055)),mode="undirected",diag=F)
V(g)\$color=(partyD+2+partyI*2)
V(g)\$label=idList[sel,3]
par(mar=c(0,0,0,0))
plot(g,layout=layout.fruchterman.reingold, edge.color=grey(0.5),vertex.size=10)
library(spaceExt)
library(igraph)
load("senate.RData")
#移除投票缺失较多的议员
sel=which(!(colSums(is.na(voteMatrix))>100))
partyD=as.numeric(idList[sel,5]=="D")
partyI=as.numeric(idList[sel,5]=="ID" | idList[sel,5]=="I")
#用spaceExt做计算
res=glasso.miss(voteMatrix[,sel],20,rho=0.1,penalize.diagonal=FALSE)
#计算偏相关系数矩阵
p=-res\$wi
d=1/sqrt(diag(res\$wi))
p=diag(d)%*%p%*%diag(d)
diag(p)=0
#igraph包生成图模型、作图
g=graph.adjacency((p>(0.055)),mode="undirected",diag=F)
V(g)\$color=(partyD+2+partyI*2)
V(g)\$label=idList[sel,3]
par(mar=c(0,0,0,0))
plot(g,layout=layout.fruchterman.reingold, edge.color=grey(0.5),vertex.size=10)
library(spaceExt)
library(igraph)
load("~/Downloads/senate.RData")
View(idList)
View(idList)
sel=which(!(colSums(is.na(voteMatrix))>100))
partyD=as.numeric(idList[sel,5]=="D")
partyI=as.numeric(idList[sel,5]=="ID" | idList[sel,5]=="I")
res=glasso.miss(voteMatrix[,sel],20,rho=0.1,penalize.diagonal=FALSE)
p=-res\$wi
p=-res\$wi
p=-res$wi
d=1/sqrt(diag(res$wi))
p=diag(d)%*%p%*%diag(d)
diag(p)=0
g=graph.adjacency((p>(0.055)),mode="undirected",diag=F)
V(g)$color=(partyD+2+partyI*2)
V(g)$label=idList[sel,3]
par(mar=c(0,0,0,0))
plot(g,layout=layout.fruchterman.reingold, edge.color=grey(0.5),vertex.size=10)
print("hello")
a <- 10;
a <- 10;
y<-c("a",TRUE)
fix(y)
fix(y)
y
y[1]
as.numeric(y)
fix(y)
as.numeric(y)
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
f <- function(x,y,z){}
f <- function(x,y,z){
return(x+y+z)
}
f(1,2,3)
formals(f)
args(sd)
args(f)
mydata <- rnorm(100)
sd(mydata)
std(mydata)
mean(mydata)
sd(x = mydata)
sd(x = mydata, na.rm=FALSE)
sd(x = mydata, na.rm=TRUE)
args(lm)
y~x
class(y~x)
f<-y~x
f
f$x
f$2
f$d
lm
search()
lm<-function(x){return(x*x)}
lm
lm
abc
abc<-function(x){
lm<-function(x){return(x*x)}
print(lm(4))}
abc()
lm
a = 1
fix(abc)
abc()
fix(abc)
abc()
abc()
a
fix(abc)
abc()
c
c<-1
c
c()
c(1,2,3)
rm c
rm(list())
rm(ls())
rm(c)
ls()
rm(ls())
f<-function(x){x*x}
f
environment(f)
parent.env(f)
parent.env(environment(f))
ls(environment(x))
x
f<-function(x){x*x}
environment(f)
ls(environment(f))
make.power<-function(n){
pow<-function(x){
x^n
}
pow
}
cube<-make.power(3)
square<-make.power(2)
cube(3)
square(3)
environment(cube)
ls(environment(cube))
get("n",environment(square))
get("pow",environment(square))
params<-c(FALSE,FALSE)
fixed<-c(FALSE,FALSE)
params[!fixed]
fiexed<-c(TRUE,FALSE)
fixed<-c(TRUE,FALSE)
params<-fixed
params[!fixed]
params[!fixed] <- 's'
params
set.seed(1)
normals<-rnorm(100,1,2)
normals
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
nLL<-make.NegLogLik(normals)
nll
nLL
ls(environment(nLL))
optim(c(mu=0,sigma=1),nLL)$par
nLL<-make.NegLogLik(normals,c(FALSE,2))
optim(nLL,c(-1,3))$minimum
optimize(nLL,c(-1,3))$minimum
nLL<-make.NegLogLik(normals,c(1,FALSE))
seq
str(seq)
seq(1.7, 1.9, len = 100)
dnorm(0)
dnorm(0)
dnorm(1)
dnorm(0.001)
dnorm(-0.001)
pnorm(0)
pnorm(1)
1-pnorm(1,lower.tail=FALSE)*2
1-pnorm(3,lower.tail=FALSE)*2
1-pnorm(2,lower.tail=FALSE)*2
qnorm(0.5)
rnorm(10)
x<-rnorm(10)
x
x
rnorm(10)
x<-rnorm(10)
print(x)
x<-rnorm(10,20,2)
x
summary(x)
sd(x)
sd(rnorm(100,20,2))
sd(rnorm(1000,20,2))
sd(rnorm(10000,20,2))
sd(rnorm(100000000,20,2))
sd(rnorm(100000,20,2))
sd(rnorm(100000,20,2))
sd(rnorm(100000,20,2))
sd(rnorm(100000,20,2))
sd(rnorm(100000,20,2))
sd(rnorm(100000,20,2))
sd(rnorm(100000,20,2))
sd(rnorm(100000,20,2))
mean(rnorm(100000,20,2))
mean(rnorm(100000,20,2))
mean(rnorm(10,20,2))
mean(rnorm(5,20,2))
mean(rnorm(5,20,2))
mean(rnorm(5,20,2))
mean(rnorm(5,20,2))
mean(rnorm(5,20,2))
mean(rnorm(5,20,2))
mean(rnorm(5,20,2))
mean(rnorm(5,20,2))
mean(rnorm(5,20,2))
y<-c()
for(i in 1:100){
y<-c(y,rnorm(5,20,2))
}
y
plot(y)
?plot
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(y,type='h')
plot(x=y,type='h')
plot(y,type='h')
hist(y,probability=TRUE)
?hist
density(y)
lines(density(energy),col='red')
lines(density(y),col='red')
for(i in 1:100){
y<-c(y,rnorm(1000,20,2))
}
hist(y,probability=TRUE)
lines(density(y),col='red')
e<-rnorm(100,0,1)
x<-1:100
y<-1.5-3*x+2
y<-1.5-3*x+e
plot(x,y)
dev.off()
x<-rnorm(100)
hist(x)
lines(density(x),col='red')
hist(x,probability=TRUE)
lines(density(x),col='red')
?hist
hist(x,probability=TRUE,density=10)
hist(x,probability=TRUE,density=100)
hist(x,probability=TRUE,density=5)
hist(x,probability=TRUE,nclass=20)
hist(rnorm(1000),probability=TRUE,nclass=20)
hist(rnorm(1000),probability=TRUE,nclass=50)
hist(rnorm(10000),probability=TRUE,nclass=50)
hist(rnorm(100000),probability=TRUE,nclass=50)
hist(rnorm(1000000),probability=TRUE,nclass=50)
hist(rnorm(1000000),probability=TRUE,nclass=100)
lines(density(rnorm(1000000)))
lines(density(rnorm(1000000)),col='red')
?par
x<-rnorm(100)
y<-x+rnorm(100)
par(las=1)
plot(x,y)
par(las=2)
plot(x,y)
par(las=1)
plot(x,y)
par(bg='red')
plot(x,y)
par(bg='white')
plot(x,y)
par(mfrow=2)
par(mfrow=2)
par("lty")
par$lty
par("lwd")
par("mfrow")
par("bg")
par(bg=transparent)
par(bg='transparent')
par("mar")
par('ma')
par('oma')
x<-rnorm(100)
y<-x+rnorm(100)
plot(x,y)
dev.off()
plot(x,y)
x1<-rnorm(10)
y1<-rnorm(10)
points(x1,y1,col='red')
text('asd')
text(100,100,'asd')
lines(x)
lines(x,y)
getwd()
pdf(file='testRplt.pdf')
x<-rnorm(100)
hist(x)
dev.off()
png(file='testRplot.png')
hist(x)
dev.off()
def.list()
dev.list()
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x=4, n=3) {
x^n
}
pow()
x <- 1:10
if(x>5){x<-0}
library(datasets)
data(iris)
?iris
i5iw
iris
iris[iris$Species = 'virginica',]
iris[iris$Species == 'virginica',]
iris[iris$Species == 'virginica',]$Sepal.Length
mean(iris[iris$Species == 'virginica',]$Sepal.Length)
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
head(mtcars)
sapply(mtcars,cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars,mtcars$cyl),mean)
split(mtcars,mtcars$cyl)
sapply(split(mtcars$hp,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)[1]
sapply(split(mtcars$hp,mtcars$cyl),mean)['4']
sapply(split(mtcars$hp,mtcars$cyl),mean)['8'] - sapply(split(mtcars$hp,mtcars$cyl),mean)['4']
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
lapply(x, function(elt) elt[,1])
sapply(x, function(elt) elt[,1])
degub(ls)
debug(ls)
ls()
ls()
ls()
x<1:10
x<-1:10
undebug
undebug(ls)
ls()
ls
ls()
x<-1:10
if(x>5) x<-0
x[x>5]=0
x
x<-1
x
x<-1L
x
class(x)
x<-c(x,,1)
x<-c(x,1)
x
class(x)
list(1,"a",TRUE,1+4i)
list(c(1,2,3),"a",TRUE,1+4i)
x<-1:3
names(x)
names(x)<-c('foo','bar','norf')
x
x$foo
x['foo']
x<-list(a=1,b=2,c=3)
x
x$
a
names(x)
install.packages("knitr")
library(nlme)
library(lattice)
xyplot(weight~Time|Diet,BodyWeight)
ls()
weight
Time
BodyWeight
plot(0,0,main=substitute(theta))
plot(0,0,main=substitute(alpha))
plot(0,0,main=expression('theta'))
set.seed(1)
rpois(5,2)
setwd("~/Dropbox/Homeworks/Computing for Data Analysis/hw3/ProgAssignment3-data")
outcome <- read.csv('outcome-of-care-measures.csv', colClasses = 'character')
head(outcome)
head(outcome)
nrow(outcome)
ncol(outcome)
names(outcome)
summary(out)
summary(outcome)
names(outcome)
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
head(outcome[,11])
range(1:10)
range(outcome[,11])
hist(outcome[,11],xlab='30-day Death Rate', main='Heart Attack 30-day Death Rate')
